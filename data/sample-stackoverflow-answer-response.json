{
    "has_more": true,
    "items": [
        {
            "answer_id": 26853961,
            "body": "<blockquote>\n<h2>How can I merge two Python dictionaries in a single expression?</h2>\n</blockquote>\n<p>For dictionaries <code>x</code> and <code>y</code>, <code>z</code> becomes a shallowly merged dictionary with values from <code>y</code> replacing those from <code>x</code>.</p>\n<ul>\n<li><p>In Python 3.9.0 or greater (released 17 October 2020): <a href=\"https://www.python.org/dev/peps/pep-0584/\" rel=\"noreferrer\">PEP-584</a>, <a href=\"https://bugs.python.org/issue36144\" rel=\"noreferrer\">discussed here</a>, was implemented and provides the simplest method:</p>\n<pre class=\"lang-py prettyprint-override\"><code>z = x | y          # NOTE: 3.9+ ONLY\n</code></pre>\n</li>\n<li><p>In Python 3.5 or greater:</p>\n<pre class=\"lang-py prettyprint-override\"><code>z = {**x, **y}\n</code></pre>\n</li>\n<li><p>In Python 2, (or 3.4 or lower) write a function:</p>\n<pre class=\"lang-py prettyprint-override\"><code>def merge_two_dicts(x, y):\n    z = x.copy()   # start with x's keys and values\n    z.update(y)    # modifies z with y's keys and values &amp; returns None\n    return z\n</code></pre>\n<p>and now:</p>\n<pre class=\"lang-py prettyprint-override\"><code>z = merge_two_dicts(x, y)\n</code></pre>\n</li>\n</ul>\n<h3>Explanation</h3>\n<p>Say you have two dictionaries and you want to merge them into a new dict without altering the original dictionaries:</p>\n<pre class=\"lang-py prettyprint-override\"><code>x = {'a': 1, 'b': 2}\ny = {'b': 3, 'c': 4}\n</code></pre>\n<p>The desired result is to get a new dictionary (<code>z</code>) with the values merged, and the second dictionary's values overwriting those from the first.</p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; z\n{'a': 1, 'b': 3, 'c': 4}\n</code></pre>\n<p>A new syntax for this, proposed in <a href=\"https://www.python.org/dev/peps/pep-0448\" rel=\"noreferrer\">PEP 448</a> and <a href=\"https://mail.python.org/pipermail/python-dev/2015-February/138564.html\" rel=\"noreferrer\">available as of Python 3.5</a>, is</p>\n<pre class=\"lang-py prettyprint-override\"><code>z = {**x, **y}\n</code></pre>\n<p>And it is indeed a single expression.</p>\n<p>Note that we can merge in with literal notation as well:</p>\n<pre class=\"lang-py prettyprint-override\"><code>z = {**x, 'foo': 1, 'bar': 2, **y}\n</code></pre>\n<p>and now:</p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; z\n{'a': 1, 'b': 3, 'foo': 1, 'bar': 2, 'c': 4}\n</code></pre>\n<p>It is now showing as implemented in the <a href=\"https://www.python.org/dev/peps/pep-0478/#features-for-3-5\" rel=\"noreferrer\">release schedule for 3.5, PEP 478</a>, and it has now made its way into <a href=\"https://docs.python.org/dev/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations\" rel=\"noreferrer\">What's New in Python 3.5</a> document.</p>\n<p>However, since many organizations are still on Python 2, you may wish to do this in a backward-compatible way. The classically Pythonic way, available in Python 2 and Python 3.0-3.4, is to do this as a two-step process:</p>\n<pre class=\"lang-py prettyprint-override\"><code>z = x.copy()\nz.update(y) # which returns None since it mutates z\n</code></pre>\n<p>In both approaches, <code>y</code> will come second and its values will replace <code>x</code>'s values, thus <code>'b'</code> will point to <code>3</code> in our final result.</p>\n<h2>Not yet on Python 3.5, but want a <em>single expression</em></h2>\n<p>If you are not yet on Python 3.5 or need to write backward-compatible code, and you want this in a <em>single expression</em>, the most performant while the correct approach is to put it in a function:</p>\n<pre class=\"lang-py prettyprint-override\"><code>def merge_two_dicts(x, y):\n    &quot;&quot;&quot;Given two dictionaries, merge them into a new dict as a shallow copy.&quot;&quot;&quot;\n    z = x.copy()\n    z.update(y)\n    return z\n</code></pre>\n<p>and then you have a single expression:</p>\n<pre class=\"lang-py prettyprint-override\"><code>z = merge_two_dicts(x, y)\n</code></pre>\n<p>You can also make a function to merge an undefined number of dictionaries, from zero to a very large number:</p>\n<pre class=\"lang-py prettyprint-override\"><code>def merge_dicts(*dict_args):\n    &quot;&quot;&quot;\n    Given any number of dictionaries, shallow copy and merge into a new dict,\n    precedence goes to key-value pairs in latter dictionaries.\n    &quot;&quot;&quot;\n    result = {}\n    for dictionary in dict_args:\n        result.update(dictionary)\n    return result\n</code></pre>\n<p>This function will work in Python 2 and 3 for all dictionaries. e.g. given dictionaries <code>a</code> to <code>g</code>:</p>\n<pre class=\"lang-py prettyprint-override\"><code>z = merge_dicts(a, b, c, d, e, f, g) \n</code></pre>\n<p>and key-value pairs in <code>g</code> will take precedence over dictionaries <code>a</code> to <code>f</code>, and so on.</p>\n<h2>Critiques of Other Answers</h2>\n<p>Don't use what you see in the formerly accepted answer:</p>\n<pre class=\"lang-py prettyprint-override\"><code>z = dict(x.items() + y.items())\n</code></pre>\n<p>In Python 2, you create two lists in memory for each dict, create a third list in memory with length equal to the length of the first two put together, and then discard all three lists to create the dict. <strong>In Python 3, this will fail</strong> because you're adding two <code>dict_items</code> objects together, not two lists -</p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; c = dict(a.items() + b.items())\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nTypeError: unsupported operand type(s) for +: 'dict_items' and 'dict_items'\n</code></pre>\n<p>and you would have to explicitly create them as lists, e.g. <code>z = dict(list(x.items()) + list(y.items()))</code>. This is a waste of resources and computation power.</p>\n<p>Similarly, taking the union of <code>items()</code> in Python 3 (<code>viewitems()</code> in Python 2.7) will also fail when values are unhashable objects (like lists, for example). Even if your values are hashable, <strong>since sets are semantically unordered, the behavior is undefined in regards to precedence. So don't do this:</strong></p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; c = dict(a.items() | b.items())\n</code></pre>\n<p>This example demonstrates what happens when values are unhashable:</p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; x = {'a': []}\n&gt;&gt;&gt; y = {'b': []}\n&gt;&gt;&gt; dict(x.items() | y.items())\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nTypeError: unhashable type: 'list'\n</code></pre>\n<p>Here's an example where y should have precedence, but instead the value from x is retained due to the arbitrary order of sets:</p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; x = {'a': 2}\n&gt;&gt;&gt; y = {'a': 1}\n&gt;&gt;&gt; dict(x.items() | y.items())\n{'a': 2}\n</code></pre>\n<p>Another hack you should not use:</p>\n<pre class=\"lang-py prettyprint-override\"><code>z = dict(x, **y)\n</code></pre>\n<p>This uses the <code>dict</code> constructor and is very fast and memory-efficient (even slightly more-so than our two-step process) but unless you know precisely what is happening here (that is, the second dict is being passed as keyword arguments to the dict constructor), it's difficult to read, it's not the intended usage, and so it is not Pythonic.</p>\n<p>Here's an example of the usage being <a href=\"https://code.djangoproject.com/attachment/ticket/13357/django-pypy.2.diff\" rel=\"noreferrer\">remediated in django</a>.</p>\n<p>Dictionaries are intended to take hashable keys (e.g. frozensets or tuples), but <strong>this method fails in Python 3 when keys are not strings.</strong></p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; c = dict(a, **b)\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nTypeError: keyword arguments must be strings\n</code></pre>\n<p>From the <a href=\"https://mail.python.org/pipermail/python-dev/2010-April/099459.html\" rel=\"noreferrer\">mailing list</a>, Guido van Rossum, the creator of the language, wrote:</p>\n<blockquote>\n<p>I am fine with\ndeclaring dict({}, **{1:3}) illegal, since after all it is abuse of\nthe ** mechanism.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p>Apparently dict(x, **y) is going around as &quot;cool hack&quot; for &quot;call\nx.update(y) and return x&quot;. Personally, I find it more despicable than\ncool.</p>\n</blockquote>\n<p>It is my understanding (as well as the understanding of the <a href=\"https://mail.python.org/pipermail/python-dev/2010-April/099485.html\" rel=\"noreferrer\">creator of the language</a>) that the intended usage for <code>dict(**y)</code> is for creating dictionaries for readability purposes, e.g.:</p>\n<pre class=\"lang-py prettyprint-override\"><code>dict(a=1, b=10, c=11)\n</code></pre>\n<p>instead of</p>\n<pre class=\"lang-py prettyprint-override\"><code>{'a': 1, 'b': 10, 'c': 11}\n</code></pre>\n<h2>Response to comments</h2>\n<blockquote>\n<p>Despite what Guido says, <code>dict(x, **y)</code> is in line with the dict specification, which btw. works for both Python 2 and 3. The fact that this only works for string keys is a direct consequence of how keyword parameters work and not a short-coming of dict. Nor is using the ** operator in this place an abuse of the mechanism, in fact, ** was designed precisely to pass dictionaries as keywords.</p>\n</blockquote>\n<p>Again, it doesn't work for 3 when keys are non-strings. The implicit calling contract is that namespaces take ordinary dictionaries, while users must only pass keyword arguments that are strings. All other callables enforced it. <code>dict</code> broke this consistency in Python 2:</p>\n<pre><code>&gt;&gt;&gt; foo(**{('a', 'b'): None})\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nTypeError: foo() keywords must be strings\n&gt;&gt;&gt; dict(**{('a', 'b'): None})\n{('a', 'b'): None}\n</code></pre>\n<p>This inconsistency was bad given other implementations of Python (Pypy, Jython, IronPython). Thus it was fixed in Python 3, as this usage could be a breaking change.</p>\n<p>I submit to you that it is malicious incompetence to intentionally write code that only works in one version of a language or that only works given certain arbitrary constraints.</p>\n<p>More comments:</p>\n<blockquote>\n<p><code>dict(x.items() + y.items())</code> is still the most readable solution for Python 2. Readability counts.</p>\n</blockquote>\n<p>My response: <code>merge_two_dicts(x, y)</code> actually seems much clearer to me, if we're actually concerned about readability. And it is not forward compatible, as Python 2 is increasingly deprecated.</p>\n<blockquote>\n<p><code>{**x, **y}</code> does not seem to handle nested dictionaries. the contents of nested keys are simply overwritten, not merged [...] I ended up being burnt by these answers that do not merge recursively and I was surprised no one mentioned it. In my interpretation of the word &quot;merging&quot; these answers describe &quot;updating one dict with another&quot;, and not merging.</p>\n</blockquote>\n<p>Yes. I must refer you back to the question, which is asking for a <em>shallow</em> merge of <em><strong>two</strong></em> dictionaries, with the first's values being overwritten by the second's - in a single expression.</p>\n<p>Assuming two dictionaries of dictionaries, one might recursively merge them in a single function, but you should be careful not to modify the dictionaries from either source, and the surest way to avoid that is to make a copy when assigning values. As keys must be hashable and are usually therefore immutable, it is pointless to copy them:</p>\n<pre class=\"lang-py prettyprint-override\"><code>from copy import deepcopy\n\ndef dict_of_dicts_merge(x, y):\n    z = {}\n    overlapping_keys = x.keys() &amp; y.keys()\n    for key in overlapping_keys:\n        z[key] = dict_of_dicts_merge(x[key], y[key])\n    for key in x.keys() - overlapping_keys:\n        z[key] = deepcopy(x[key])\n    for key in y.keys() - overlapping_keys:\n        z[key] = deepcopy(y[key])\n    return z\n</code></pre>\n<p>Usage:</p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; x = {'a':{1:{}}, 'b': {2:{}}}\n&gt;&gt;&gt; y = {'b':{10:{}}, 'c': {11:{}}}\n&gt;&gt;&gt; dict_of_dicts_merge(x, y)\n{'b': {2: {}, 10: {}}, 'a': {1: {}}, 'c': {11: {}}}\n</code></pre>\n<p>Coming up with contingencies for other value types is far beyond the scope of this question, so I will point you at <a href=\"https://stackoverflow.com/a/24088493/541136\">my answer to the canonical question on a &quot;Dictionaries of dictionaries merge&quot;</a>.</p>\n<h2>Less Performant But Correct Ad-hocs</h2>\n<p>These approaches are less performant, but they will provide correct behavior.\nThey will be <em>much less</em> performant than <code>copy</code> and <code>update</code> or the new unpacking because they iterate through each key-value pair at a higher level of abstraction, but they <em>do</em> respect the order of precedence (latter dictionaries have precedence)</p>\n<p>You can also chain the dictionaries manually inside a <a href=\"https://www.python.org/dev/peps/pep-0274/\" rel=\"noreferrer\">dict comprehension</a>:</p>\n<pre class=\"lang-py prettyprint-override\"><code>{k: v for d in dicts for k, v in d.items()} # iteritems in Python 2.7\n</code></pre>\n<p>or in python 2.6 (and perhaps as early as 2.4 when generator expressions were introduced):</p>\n<pre class=\"lang-py prettyprint-override\"><code>dict((k, v) for d in dicts for k, v in d.items()) # iteritems in Python 2\n</code></pre>\n<p><code>itertools.chain</code> will chain the iterators over the key-value pairs in the correct order:</p>\n<pre class=\"lang-py prettyprint-override\"><code>from itertools import chain\nz = dict(chain(x.items(), y.items())) # iteritems in Python 2\n</code></pre>\n<h2>Performance Analysis</h2>\n<p>I'm only going to do the performance analysis of the usages known to behave correctly. (Self-contained so you can copy and paste yourself.)</p>\n<pre class=\"lang-py prettyprint-override\"><code>from timeit import repeat\nfrom itertools import chain\n\nx = dict.fromkeys('abcdefg')\ny = dict.fromkeys('efghijk')\n\ndef merge_two_dicts(x, y):\n    z = x.copy()\n    z.update(y)\n    return z\n\nmin(repeat(lambda: {**x, **y}))\nmin(repeat(lambda: merge_two_dicts(x, y)))\nmin(repeat(lambda: {k: v for d in (x, y) for k, v in d.items()}))\nmin(repeat(lambda: dict(chain(x.items(), y.items()))))\nmin(repeat(lambda: dict(item for d in (x, y) for item in d.items())))\n</code></pre>\n<p>In Python 3.8.1, NixOS:</p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; min(repeat(lambda: {**x, **y}))\n1.0804965235292912\n&gt;&gt;&gt; min(repeat(lambda: merge_two_dicts(x, y)))\n1.636518670246005\n&gt;&gt;&gt; min(repeat(lambda: {k: v for d in (x, y) for k, v in d.items()}))\n3.1779992282390594\n&gt;&gt;&gt; min(repeat(lambda: dict(chain(x.items(), y.items()))))\n2.740647904574871\n&gt;&gt;&gt; min(repeat(lambda: dict(item for d in (x, y) for item in d.items())))\n4.266070580109954\n</code></pre>\n<pre class=\"lang-sh prettyprint-override\"><code>$ uname -a\nLinux nixos 4.19.113 #1-NixOS SMP Wed Mar 25 07:06:15 UTC 2020 x86_64 GNU/Linux\n</code></pre>\n<h2>Resources on Dictionaries</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/327311/how-are-pythons-built-in-dictionaries-implemented/44509302#44509302\">My explanation of Python's <strong>dictionary implementation</strong>, updated for 3.6.</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1024847/add-new-keys-to-a-dictionary/27208535#27208535\">Answer on how to add new keys to a dictionary</a></li>\n<li><a href=\"https://stackoverflow.com/questions/209840/map-two-lists-into-a-dictionary-in-python/33737067#33737067\">Mapping two lists into a dictionary</a></li>\n<li>The official Python <a href=\"https://docs.python.org/3/tutorial/datastructures.html#dictionaries\" rel=\"noreferrer\">docs on dictionaries</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=66P5FMkWoVU\" rel=\"noreferrer\">The Dictionary Even Mightier</a> - talk by Brandon Rhodes at Pycon 2017</li>\n<li><a href=\"https://www.youtube.com/watch?v=npw4s1QTmPg\" rel=\"noreferrer\">Modern Python Dictionaries, A Confluence of Great Ideas</a> - talk by Raymond Hettinger at Pycon 2017</li>\n</ul>\n",
            "content_license": "CC BY-SA 4.0",
            "creation_date": 1415657508,
            "is_accepted": true,
            "last_activity_date": 1608299846,
            "last_edit_date": 1608299846,
            "owner": {
                "accept_rate": 96,
                "display_name": "Aaron Hall",
                "link": "https://stackoverflow.com/users/541136/aaron-hall",
                "profile_image": "https://i.stack.imgur.com/wftMn.jpg?s=128&g=1",
                "reputation": 287947,
                "user_id": 541136,
                "user_type": "moderator"
            },
            "question_id": 38987,
            "score": 7022
        },
        {
            "answer_id": 14220323,
            "body": "<blockquote>\n<p><em>→ For a more general explanation of async behaviour with different examples, please see</em> <a href=\"https://stackoverflow.com/q/23667086/218196\">Why is my variable unaltered after I modify it inside of a function? - Asynchronous code reference</a></p>\n<p><em>→ If you already understand the problem, skip to the possible solutions below.</em></p>\n</blockquote>\n<h1>The problem</h1>\n<p>The <strong>A</strong> in <a href=\"https://en.wikipedia.org/wiki/Ajax_(programming)\" rel=\"noreferrer\">Ajax</a> stands for <a href=\"https://www.merriam-webster.com/dictionary/asynchronous\" rel=\"noreferrer\"><strong>asynchronous</strong></a>. That means sending the request (or rather receiving the response) is taken out of the normal execution flow. In your example, <code>$.ajax</code> returns immediately and the next statement, <code>return result;</code>, is executed before the function you passed as <code>success</code> callback was even called.</p>\n<p>Here is an analogy which hopefully makes the difference between synchronous and asynchronous flow clearer:</p>\n<h2>Synchronous</h2>\n<p>Imagine you make a phone call to a friend and ask him to look something up for you. Although it might take a while, you wait on the phone and stare into space, until your friend gives you the answer that you needed.</p>\n<p>The same is happening when you make a function call containing &quot;normal&quot; code:</p>\n<pre><code>function findItem() {\n    var item;\n    while(item_not_found) {\n        // search\n    }\n    return item;\n}\n\nvar item = findItem();\n\n// Do something with item\ndoSomethingElse();\n</code></pre>\n<p>Even though <code>findItem</code> might take a long time to execute, any code coming after <code>var item = findItem();</code> has to <em>wait</em> until the function returns the result.</p>\n<h2>Asynchronous</h2>\n<p>You call your friend again for the same reason. But this time you tell him that you are in a hurry and he should <em>call you back</em> on your mobile phone. You hang up, leave the house, and do whatever you planned to do. Once your friend calls you back, you are dealing with the information he gave to you.</p>\n<p>That's exactly what's happening when you do an Ajax request.</p>\n<pre><code>findItem(function(item) {\n    // Do something with the item\n});\ndoSomethingElse();\n</code></pre>\n<p>Instead of waiting for the response, the execution continues immediately and the statement after the Ajax call is executed. To get the response eventually, you provide a function to be called once the response was received, a <em>callback</em> (notice something? <em>call back</em> ?). Any statement coming after that call is executed before the callback is called.</p>\n<hr />\n<h1>Solution(s)</h1>\n<p><strong>Embrace the asynchronous nature of JavaScript!</strong> While certain asynchronous operations provide synchronous counterparts (so does &quot;Ajax&quot;), it's generally discouraged to use them, especially in a browser context.</p>\n<p>Why is it bad do you ask?</p>\n<p>JavaScript runs in the UI thread of the browser and any long-running process will lock the UI, making it unresponsive. Additionally, there is an upper limit on the execution time for JavaScript and the browser will ask the user whether to continue the execution or not.</p>\n<p>All of this is a really bad user experience. The user won't be able to tell whether everything is working fine or not. Furthermore, the effect will be worse for users with a slow connection.</p>\n<p>In the following we will look at three different solutions that are all building on top of each other:</p>\n<ul>\n<li><strong>Promises with <code>async/await</code></strong> (ES2017+, available in older browsers if you use a transpiler or regenerator)</li>\n<li><strong>Callbacks</strong> (popular in node)</li>\n<li><strong>Promises with <code>then()</code></strong> (ES2015+, available in older browsers if you use one of the many promise libraries)</li>\n</ul>\n<p><strong>All three are available in current browsers, and node 7+.</strong></p>\n<hr />\n<h2>ES2017+: Promises with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\" rel=\"noreferrer\"><code>async/await</code></a></h2>\n<p>The ECMAScript version released in 2017 introduced <em>syntax-level support</em> for asynchronous functions. With the help of <code>async</code> and <code>await</code>, you can write asynchronous in a &quot;synchronous style&quot;. The code is still asynchronous, but it's easier to read/understand.</p>\n<p><code>async/await</code> builds on top of promises: an <code>async</code> function always returns a promise. <code>await</code> &quot;unwraps&quot; a promise and either result in the value the promise was resolved with or throws an error if the promise was rejected.</p>\n<p><strong>Important:</strong> You can only use <code>await</code> inside an <code>async</code> function. Right now, top-level <code>await</code> isn't yet supported, so you might have to make an async IIFE (<a href=\"https://en.wikipedia.org/wiki/Immediately_invoked_function_expression\" rel=\"noreferrer\">Immediately Invoked Function Expression</a>) to start an <code>async</code> context.</p>\n<p>You can read more about <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\" rel=\"noreferrer\"><code>async</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await\" rel=\"noreferrer\"><code>await</code></a> on MDN.</p>\n<p>Here is an example that builds on top of delay above:</p>\n<pre><code>// Using 'superagent' which will return a promise.\nvar superagent = require('superagent')\n\n// This is isn't declared as `async` because it already returns a promise\nfunction delay() {\n  // `delay` returns a promise\n  return new Promise(function(resolve, reject) {\n    // Only `delay` is able to resolve or reject the promise\n    setTimeout(function() {\n      resolve(42); // After 3 seconds, resolve the promise with value 42\n    }, 3000);\n  });\n}\n\n\nasync function getAllBooks() {\n  try {\n    // GET a list of book IDs of the current user\n    var bookIDs = await superagent.get('/user/books');\n    // wait for 3 seconds (just for the sake of this example)\n    await delay();\n    // GET information about each book\n    return await superagent.get('/books/ids='+JSON.stringify(bookIDs));\n  } catch(error) {\n    // If any of the awaited promises was rejected, this catch block\n    // would catch the rejection reason\n    return null;\n  }\n}\n\n// Start an IIFE to use `await` at the top level\n(async function(){\n  let books = await getAllBooks();\n  console.log(books);\n})();\n</code></pre>\n<p>Current <a href=\"https://kangax.github.io/compat-table/es2016plus/#test-async_functions\" rel=\"noreferrer\">browser</a> and <a href=\"http://node.green/#ES2017-features-async-functions\" rel=\"noreferrer\">node</a> versions support <code>async/await</code>. You can also support older environments by transforming your code to ES5 with the help of <a href=\"https://github.com/facebook/regenerator\" rel=\"noreferrer\">regenerator</a> (or tools that use regenerator, such as <a href=\"https://babeljs.io/\" rel=\"noreferrer\">Babel</a>).</p>\n<hr />\n<h2>Let functions accept <em>callbacks</em></h2>\n<p>A callback is when function 1 is passed to function 2. Function 2 can call function 1 whenever it is ready. In the context of an asynchronous process, the callback will be called whenever the asynchronous process is done. Usually, the result is passed to the callback.</p>\n<p>In the example of the question, you can make <code>foo</code> accept a callback and use it as <code>success</code> callback. So this</p>\n<pre><code>var result = foo();\n// Code that depends on 'result'\n</code></pre>\n<p>becomes</p>\n<pre><code>foo(function(result) {\n    // Code that depends on 'result'\n});\n</code></pre>\n<p>Here we defined the function &quot;inline&quot; but you can pass any function reference:</p>\n<pre><code>function myCallback(result) {\n    // Code that depends on 'result'\n}\n\nfoo(myCallback);\n</code></pre>\n<p><code>foo</code> itself is defined as follows:</p>\n<pre><code>function foo(callback) {\n    $.ajax({\n        // ...\n        success: callback\n    });\n}\n</code></pre>\n<p><code>callback</code> will refer to the function we pass to <code>foo</code> when we call it and we pass it on to <code>success</code>. I.e. once the Ajax request is successful, <code>$.ajax</code> will call <code>callback</code> and pass the response to the callback (which can be referred to with <code>result</code>, since this is how we defined the callback).</p>\n<p>You can also process the response before passing it to the callback:</p>\n<pre><code>function foo(callback) {\n    $.ajax({\n        // ...\n        success: function(response) {\n            // For example, filter the response\n            callback(filtered_response);\n        }\n    });\n}\n</code></pre>\n<p>It's easier to write code using callbacks than it may seem. After all, JavaScript in the browser is heavily event-driven (DOM events). Receiving the Ajax response is nothing else but an event.\nDifficulties could arise when you have to work with third-party code, but most problems can be solved by just thinking through the application flow.</p>\n<hr />\n<h2>ES2015+: Promises with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"noreferrer\">then()</a></h2>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"noreferrer\">Promise API</a> is a new feature of ECMAScript 6 (ES2015), but it has good <a href=\"http://caniuse.com/#feat=promises\" rel=\"noreferrer\" title=\"caniuse\">browser support</a> already. There are also many libraries which implement the standard Promises API and provide additional methods to ease the use and composition of asynchronous functions (e.g., <a href=\"https://github.com/petkaantonov/bluebird\" rel=\"noreferrer\">bluebird</a>).</p>\n<p>Promises are containers for <em>future</em> values. When the promise receives the value (it is <em>resolved</em>) or when it is canceled (<em>rejected</em>), it notifies all of its &quot;listeners&quot; who want to access this value.</p>\n<p>The advantage over plain callbacks is that they allow you to decouple your code and they are easier to compose.</p>\n<p>Here is an example of using a promise:</p>\n<pre><code>function delay() {\n  // `delay` returns a promise\n  return new Promise(function(resolve, reject) {\n    // Only `delay` is able to resolve or reject the promise\n    setTimeout(function() {\n      resolve(42); // After 3 seconds, resolve the promise with value 42\n    }, 3000);\n  });\n}\n\ndelay()\n  .then(function(v) { // `delay` returns a promise\n    console.log(v); // Log the value once it is resolved\n  })\n  .catch(function(v) {\n    // Or do something else if it is rejected\n    // (it would not happen in this example, since `reject` is not called).\n  });\n</code></pre>\n<p>Applied to our Ajax call we could use promises like this:</p>\n<pre><code>function ajax(url) {\n  return new Promise(function(resolve, reject) {\n    var xhr = new XMLHttpRequest();\n    xhr.onload = function() {\n      resolve(this.responseText);\n    };\n    xhr.onerror = reject;\n    xhr.open('GET', url);\n    xhr.send();\n  });\n}\n\najax(&quot;/echo/json&quot;)\n  .then(function(result) {\n    // Code depending on result\n  })\n  .catch(function() {\n    // An error occurred\n  });\n</code></pre>\n<p>Describing all the advantages that promise offer is beyond the scope of this answer, but if you write new code, you should seriously consider them. They provide a great abstraction and separation of your code.</p>\n<p>More information about promises: <a href=\"http://www.html5rocks.com/en/tutorials/es6/promises/\" rel=\"noreferrer\">HTML5 rocks - JavaScript Promises</a></p>\n<h3>Side note: jQuery's deferred objects</h3>\n<p><a href=\"https://stackoverflow.com/questions/4866721/what-are-deferred-objects\">Deferred objects</a> are jQuery's custom implementation of promises (before the Promise API was standardized). They behave almost like promises but expose a slightly different API.</p>\n<p>Every Ajax method of jQuery already returns a &quot;deferred object&quot; (actually a promise of a deferred object) which you can just return from your function:</p>\n<pre><code>function ajax() {\n    return $.ajax(...);\n}\n\najax().done(function(result) {\n    // Code depending on result\n}).fail(function() {\n    // An error occurred\n});\n</code></pre>\n<h3>Side note: Promise gotchas</h3>\n<p>Keep in mind that promises and deferred objects are just <em>containers</em> for a future value, they are not the value itself. For example, suppose you had the following:</p>\n<pre><code>function checkPassword() {\n    return $.ajax({\n        url: '/password',\n        data: {\n            username: $('#username').val(),\n            password: $('#password').val()\n        },\n        type: 'POST',\n        dataType: 'json'\n    });\n}\n\nif (checkPassword()) {\n    // Tell the user they're logged in\n}\n</code></pre>\n<p>This code misunderstands the above asynchronous issues. Specifically, <code>$.ajax()</code> doesn't freeze the code while it checks the '/password' page on your server - it sends a request to the server and while it waits, it immediately returns a jQuery Ajax Deferred object, not the response from the server. That means the <code>if</code> statement is going to always get this Deferred object, treat it as <code>true</code>, and proceed as though the user is logged in. Not good.</p>\n<p>But the fix is easy:</p>\n<pre><code>checkPassword()\n.done(function(r) {\n    if (r) {\n        // Tell the user they're logged in\n    } else {\n        // Tell the user their password was bad\n    }\n})\n.fail(function(x) {\n    // Tell the user something bad happened\n});\n</code></pre>\n<hr />\n<h2>Not recommended: Synchronous &quot;Ajax&quot; calls</h2>\n<p>As I mentioned, some(!) asynchronous operations have synchronous counterparts. I don't advocate their use, but for completeness' sake, here is how you would perform a synchronous call:</p>\n<h3>Without jQuery</h3>\n<p>If you directly use a <a href=\"https://xhr.spec.whatwg.org/\" rel=\"noreferrer\"><code>XMLHttpRequest</code></a> object, pass <code>false</code> as third argument to <a href=\"https://xhr.spec.whatwg.org/#the-open()-method\" rel=\"noreferrer\"><code>.open</code></a>.</p>\n<h3>jQuery</h3>\n<p>If you use <a href=\"http://api.jquery.com/jQuery.ajax/\" rel=\"noreferrer\">jQuery</a>, you can set the <code>async</code> option to <code>false</code>. Note that this option is <em>deprecated</em> since jQuery 1.8.\nYou can then either still use a <code>success</code> callback or access the <code>responseText</code> property of the <a href=\"http://api.jquery.com/jQuery.ajax/#jqXHR\" rel=\"noreferrer\">jqXHR object</a>:</p>\n<pre><code>function foo() {\n    var jqXHR = $.ajax({\n        //...\n        async: false\n    });\n    return jqXHR.responseText;\n}\n</code></pre>\n<p>If you use any other jQuery Ajax method, such as <code>$.get</code>, <code>$.getJSON</code>, etc., you have to change it to <code>$.ajax</code> (since you can only pass configuration parameters to <code>$.ajax</code>).</p>\n<p><strong>Heads up!</strong> It is not possible to make a synchronous <a href=\"https://stackoverflow.com/questions/2067472/please-explain-jsonp\">JSONP</a> request. JSONP by its very nature is always asynchronous (one more reason to not even consider this option).</p>\n",
            "content_license": "CC BY-SA 4.0",
            "creation_date": 1357664774,
            "is_accepted": true,
            "last_activity_date": 1617968438,
            "last_edit_date": 1617968438,
            "owner": {
                "accept_rate": 100,
                "display_name": "Felix Kling",
                "link": "https://stackoverflow.com/users/218196/felix-kling",
                "profile_image": "https://i.stack.imgur.com/4P5DY.jpg?s=128&g=1",
                "reputation": 700594,
                "user_id": 218196,
                "user_type": "registered"
            },
            "question_id": 14220321,
            "score": 6031
        },
        {
            "answer_id": 38990,
            "body": "<p>In your case, what you can do is:</p>\n<pre class=\"lang-py prettyprint-override\"><code>z = dict(list(x.items()) + list(y.items()))\n</code></pre>\n<p>This will, as you want it, put the final dict in <code>z</code>, and make the value for key <code>b</code> be properly overridden by the second (<code>y</code>) dict's value:</p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; z = dict(list(x.items()) + list(y.items()))\n&gt;&gt;&gt; z\n{'a': 1, 'c': 11, 'b': 10}\n\n</code></pre>\n<p>If you use Python 2, you can even remove the <code>list()</code> calls. To create z:</p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; z = dict(x.items() + y.items())\n&gt;&gt;&gt; z\n{'a': 1, 'c': 11, 'b': 10}\n</code></pre>\n<p>If you use Python version 3.9.0a4 or greater, then you can directly use:</p>\n<pre class=\"lang-py prettyprint-override\"><code>x = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\nz = x | y\nprint(z)\n</code></pre>\n<pre class=\"lang-py prettyprint-override\"><code>{'a': 1, 'c': 11, 'b': 10}\n</code></pre>\n",
            "content_license": "CC BY-SA 4.0",
            "creation_date": 1220341812,
            "is_accepted": false,
            "last_activity_date": 1604092089,
            "last_edit_date": 1604092089,
            "owner": {
                "accept_rate": 42,
                "display_name": "Thomas Vander Stichele",
                "link": "https://stackoverflow.com/users/2900/thomas-vander-stichele",
                "profile_image": "https://www.gravatar.com/avatar/f5dc647e1f30b6127527da3dbfdaba73?s=128&d=identicon&r=PG",
                "reputation": 33881,
                "user_id": 2900,
                "user_type": "registered"
            },
            "question_id": 38987,
            "score": 1680
        },
        {
            "answer_id": 16825593,
            "body": "<h1>If you're <em>not</em> using jQuery in your code, this answer is for you</h1>\n<p>Your code should be something along the lines of this:</p>\n<pre><code>function foo() {\n    var httpRequest = new XMLHttpRequest();\n    httpRequest.open('GET', &quot;/echo/json&quot;);\n    httpRequest.send();\n    return httpRequest.responseText;\n}\n\nvar result = foo(); // Always ends up being 'undefined'\n</code></pre>\n<p><a href=\"https://stackoverflow.com/questions/14220321/how-do-i-return-the-response-from-an-asynchronous-call/14220323#14220323\">Felix Kling did a fine job</a> writing an answer for people using jQuery for AJAX, but I've decided to provide an alternative for people who aren't.</p>\n<p>(<a href=\"https://stackoverflow.com/a/30180679/1348195\">Note, for those using the new <code>fetch</code> API, Angular or promises I've added another answer below</a>)</p>\n<hr />\n<h1>What you're facing</h1>\n<p>This is a short summary of &quot;Explanation of the problem&quot; from the other answer, if you're not sure after reading this, read that.</p>\n<p>The <strong>A</strong> in AJAX stands for <strong>asynchronous</strong>. That means sending the request (or rather receiving the response) is taken out of the normal execution flow. In your example, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#send%28%29\" rel=\"noreferrer\"><code>.send</code></a> returns immediately and the next statement, <code>return result;</code>, is executed before the function you passed as <code>success</code> callback was even called.</p>\n<p>This means when you're returning, the listener you've defined did not execute yet, which means the value you're returning has not been defined.</p>\n<p>Here is a simple analogy:</p>\n<pre><code>function getFive(){\n    var a;\n    setTimeout(function(){\n         a=5;\n    },10);\n    return a;\n}\n</code></pre>\n<p><a href=\"http://jsfiddle.net/7RK3k/\" rel=\"noreferrer\">(Fiddle)</a></p>\n<p>The value of <code>a</code> returned is <code>undefined</code> since the <code>a=5</code> part has not executed yet. AJAX acts like this, you're returning the value before the server got the chance to tell your browser what that value is.</p>\n<p>One possible solution to this problem is to code <em>re-actively</em> , telling your program what to do when the calculation completed.</p>\n<pre><code>function onComplete(a){ // When the code completes, do this\n    alert(a);\n}\n\nfunction getFive(whenDone){\n    var a;\n    setTimeout(function(){\n         a=5;\n         whenDone(a);\n    },10);\n}\n</code></pre>\n<p>This is called <a href=\"http://en.wikipedia.org/wiki/Continuation-passing_style\" rel=\"noreferrer\">CPS</a>. Basically, we're passing <code>getFive</code> an action to perform when it completes, we're telling our code how to react when an event completes (like our AJAX call, or in this case the timeout).</p>\n<p>Usage would be:</p>\n<pre><code>getFive(onComplete);\n</code></pre>\n<p>Which should alert &quot;5&quot; to the screen. <a href=\"http://jsfiddle.net/PAjZR/\" rel=\"noreferrer\">(Fiddle)</a>.</p>\n<h1>Possible solutions</h1>\n<p>There are basically two ways how to solve this:</p>\n<ol>\n<li>Make the AJAX call synchronous (let’s call it SJAX).</li>\n<li>Restructure your code to work properly with callbacks.</li>\n</ol>\n<h2>1. Synchronous AJAX - Don't do it!!</h2>\n<p>As for synchronous AJAX, <strong>don't do it!</strong> Felix's answer raises some compelling arguments about why it's a bad idea. To sum it up, it'll freeze the user's browser until the server returns the response and create a very bad user experience. Here is another short summary taken from MDN on why:</p>\n<blockquote>\n<p>XMLHttpRequest supports both synchronous and asynchronous communications. In general, however, asynchronous requests should be preferred to synchronous requests for performance reasons.</p>\n<p>In short, synchronous requests block the execution of code... ...this can cause serious issues...</p>\n</blockquote>\n<p>If you <em>have</em> to do it, you can pass a flag. <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Synchronous_and_Asynchronous_Requests#Synchronous_request\" rel=\"noreferrer\">Here is how</a>:</p>\n<pre><code>var request = new XMLHttpRequest();\nrequest.open('GET', 'yourURL', false);  // `false` makes the request synchronous\nrequest.send(null);\n\nif (request.status === 200) {// That's HTTP for 'ok'\n  console.log(request.responseText);\n}\n</code></pre>\n<h2>2. Restructure code</h2>\n<p>Let your function accept a callback. In the example code <code>foo</code> can be made to accept a callback. We'll be telling our code how to <em>react</em> when <code>foo</code> completes.</p>\n<p>So:</p>\n<pre><code>var result = foo();\n// Code that depends on `result` goes here\n</code></pre>\n<p>Becomes:</p>\n<pre><code>foo(function(result) {\n    // Code that depends on `result`\n});\n</code></pre>\n<p>Here we passed an anonymous function, but we could just as easily pass a reference to an existing function, making it look like:</p>\n<pre><code>function myHandler(result) {\n    // Code that depends on `result`\n}\nfoo(myHandler);\n</code></pre>\n<p>For more details on how this sort of callback design is done, check Felix's answer.</p>\n<p>Now, let's define foo itself to act accordingly</p>\n<pre><code>function foo(callback) {\n    var httpRequest = new XMLHttpRequest();\n    httpRequest.onload = function(){ // When the request is loaded\n       callback(httpRequest.responseText);// We're calling our method\n    };\n    httpRequest.open('GET', &quot;/echo/json&quot;);\n    httpRequest.send();\n}\n</code></pre>\n<p><a href=\"http://jsfiddle.net/DAcWT/\" rel=\"noreferrer\">(fiddle)</a></p>\n<p>We have now made our <em>foo</em> function accept an action to run when the AJAX completes successfully. We can extend this further by checking if the response status is not 200 and acting accordingly (create a fail handler and such). Effectively it is solving our issue.</p>\n<p>If you're still having a hard time understanding this, <a href=\"https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started\" rel=\"noreferrer\">read the AJAX getting started guide</a> at MDN.</p>\n",
            "content_license": "CC BY-SA 4.0",
            "creation_date": 1369870256,
            "is_accepted": false,
            "last_activity_date": 1617968740,
            "last_edit_date": 1617968740,
            "owner": {
                "accept_rate": 88,
                "display_name": "Benjamin Gruenbaum",
                "link": "https://stackoverflow.com/users/1348195/benjamin-gruenbaum",
                "profile_image": "https://www.gravatar.com/avatar/f6dca2295546af21e1cde8e68f2d49bd?s=128&d=identicon&r=PG",
                "reputation": 245484,
                "user_id": 1348195,
                "user_type": "registered"
            },
            "question_id": 14220321,
            "score": 1127
        },
        {
            "answer_id": 2711073,
            "body": "<p>There's no performance difference, as they compile to the same bytecode:</p>\n<pre><code>&gt;&gt;&gt; import dis\n&gt;&gt;&gt; dis.dis(&quot;not x is None&quot;)\n  1           0 LOAD_NAME                0 (x)\n              2 LOAD_CONST               0 (None)\n              4 COMPARE_OP               9 (is not)\n              6 RETURN_VALUE\n&gt;&gt;&gt; dis.dis(&quot;x is not None&quot;)\n  1           0 LOAD_NAME                0 (x)\n              2 LOAD_CONST               0 (None)\n              4 COMPARE_OP               9 (is not)\n              6 RETURN_VALUE\n</code></pre>\n<p>Stylistically, I try to avoid <code>not x is y</code>, a human reader might misunderstand it as <code>(not x) is y</code>. If I write <code>x is not y</code> then there is no ambiguity.</p>\n",
            "content_license": "CC BY-SA 4.0",
            "creation_date": 1272254104,
            "is_accepted": true,
            "last_activity_date": 1604050175,
            "last_edit_date": 1604050175,
            "owner": {
                "accept_rate": 87,
                "display_name": "Daniel Stutzbach",
                "link": "https://stackoverflow.com/users/219162/daniel-stutzbach",
                "profile_image": "https://www.gravatar.com/avatar/4c7f016d15f498b5274e153dce3e7974?s=128&d=identicon&r=PG",
                "reputation": 65596,
                "user_id": 219162,
                "user_type": "registered"
            },
            "question_id": 2710940,
            "score": 1101
        },
        {
            "answer_id": 39437,
            "body": "<p>An alternative:</p>\n\n<pre><code>z = x.copy()\nz.update(y)\n</code></pre>\n",
            "content_license": "CC BY-SA 2.5",
            "creation_date": 1220360446,
            "is_accepted": false,
            "last_activity_date": 1220360446,
            "owner": {
                "accept_rate": 100,
                "display_name": "Matthew Schinckel",
                "link": "https://stackoverflow.com/users/188/matthew-schinckel",
                "profile_image": "https://www.gravatar.com/avatar/833bfbcc9940cfcf0af6def751c23b05?s=128&d=identicon&r=PG",
                "reputation": 32184,
                "user_id": 188,
                "user_type": "registered"
            },
            "question_id": 38987,
            "score": 672
        },
        {
            "answer_id": 18309057,
            "body": "<p><strong><a href=\"http://en.wikipedia.org/wiki/XMLHttpRequest\" rel=\"nofollow noreferrer\">XMLHttpRequest</a> 2</strong> (first of all, read the answers from <a href=\"https://stackoverflow.com/a/16825593/19068\">Benjamin Gruenbaum</a> and <a href=\"https://stackoverflow.com/a/14220323/19068\">Felix Kling</a>)</p>\n<p>If you don't use jQuery and want a nice short XMLHttpRequest 2 which works in the modern browsers and also in the mobile browsers, I suggest to use it this way:</p>\n<pre><code>function ajax(a, b, c){ // URL, callback, just a placeholder\n  c = new XMLHttpRequest;\n  c.open('GET', a);\n  c.onload = b;\n  c.send()\n}\n</code></pre>\n<p>As you can see:</p>\n<ol>\n<li>It's shorter than all other functions Listed.</li>\n<li>The callback is set directly (so no extra unnecessary closures).</li>\n<li>It uses the new onload (so you don't have to check for readystate &amp;&amp; status)</li>\n<li>There are some other situations, which I don't remember, that make the XMLHttpRequest 1 annoying.</li>\n</ol>\n<p>There are two ways to get the response of this Ajax call (three using the XMLHttpRequest var name):</p>\n<p>The simplest:</p>\n<pre><code>this.response\n</code></pre>\n<p>Or if for some reason you <code>bind()</code> the callback to a class:</p>\n<pre><code>e.target.response\n</code></pre>\n<p>Example:</p>\n<pre><code>function callback(e){\n  console.log(this.response);\n}\najax('URL', callback);\n</code></pre>\n<p>Or (the above one is better anonymous functions are always a problem):</p>\n<pre><code>ajax('URL', function(e){console.log(this.response)});\n</code></pre>\n<p>Nothing easier.</p>\n<p>Now some people will probably say that it's better to use onreadystatechange or the even the XMLHttpRequest variable name. That's wrong.</p>\n<p>Check out <a href=\"http://caniuse.com/xhr2\" rel=\"nofollow noreferrer\">XMLHttpRequest advanced features</a>.</p>\n<p>It supported all *modern browsers. And I can confirm as I have been using this approach since XMLHttpRequest 2 was created. I never had any type of problem in any browsers I used.</p>\n<p>onreadystatechange is only useful if you want to get the headers on state 2.</p>\n<p>Using the <code>XMLHttpRequest</code> variable name is another big error as you need to execute the callback inside the onload/oreadystatechange closures, or else you lost it.</p>\n<hr />\n<p>Now if you want something more complex using <a href=\"https://en.wikipedia.org/wiki/POST_%28HTTP%29\" rel=\"nofollow noreferrer\">POST</a> and FormData you can easily extend this function:</p>\n<pre><code>function x(a, b, e, d, c){ // URL, callback, method, formdata or {key:val},placeholder\n  c = new XMLHttpRequest;\n  c.open(e||'get', a);\n  c.onload = b;\n  c.send(d||null)\n}\n</code></pre>\n<p>Again ... it's a very short function, but it does <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods\" rel=\"nofollow noreferrer\">GET</a> and POST.</p>\n<p>Examples of usage:</p>\n<pre><code>x(url, callback); // By default it's GET so no need to set\nx(url, callback, 'post', {'key': 'val'}); // No need to set POST data\n</code></pre>\n<p>Or pass a full form element (<code>document.getElementsByTagName('form')[0]</code>):</p>\n<pre><code>var fd = new FormData(form);\nx(url, callback, 'post', fd);\n</code></pre>\n<p>Or set some custom values:</p>\n<pre><code>var fd = new FormData();\nfd.append('key', 'val')\nx(url, callback, 'post', fd);\n</code></pre>\n<p>As you can see, I didn't implement sync... it's a bad thing.</p>\n<p>Having said that ... why don't we do it the easy way?</p>\n<hr />\n<p>As mentioned in the comment, the use of error &amp;&amp; synchronous does completely break the point of the answer. Which is a nice short way to use Ajax in the proper way?</p>\n<p><em>Error handler</em></p>\n<pre><code>function x(a, b, e, d, c){ // URL, callback, method, formdata or {key:val}, placeholder\n  c = new XMLHttpRequest;\n  c.open(e||'get', a);\n  c.onload = b;\n  c.onerror = error;\n  c.send(d||null)\n}\n\nfunction error(e){\n  console.log('--Error--', this.type);\n  console.log('this: ', this);\n  console.log('Event: ', e)\n}\nfunction displayAjax(e){\n  console.log(e, this);\n}\nx('WRONGURL', displayAjax);\n</code></pre>\n<p>In the above script, you have an error handler which is statically defined, so it does not compromise the function. The error handler can be used for other functions too.</p>\n<p>But to really get out an error, the <strong>only</strong> way is to write a wrong URL in which case every browser throws an error.</p>\n<p>Error handlers are maybe useful if you set custom headers, set the responseType to blob array buffer, or whatever...</p>\n<p>Even if you pass 'POSTAPAPAP' as the method it won't throw an error.</p>\n<p>Even if you pass 'fdggdgilfdghfldj' as formdata it won't throw an error.</p>\n<p>In the first case the error is inside the <code>displayAjax()</code> under <code>this.statusText</code> as <code>Method not Allowed</code>.</p>\n<p>In the second case, it simply works. You have to check at the server side if you passed the right post data.</p>\n<p>Cross-domain not allowed throws an error automatically.</p>\n<p>In the error response, there aren't any error codes.</p>\n<p>There is only the <code>this.type</code> which is set to <em>error</em>.</p>\n<p>Why add an error handler if you totally don't have any control over errors?\nMost of the errors are returned inside this in the callback function <code>displayAjax()</code>.</p>\n<p>So: There isn't any need for error checks if you're able to copy and paste the URL properly. ;)</p>\n<p><em>PS: As the first test I wrote x('x', displayAjax)..., and it totally got a response...??? So I checked the folder where the HTML is located, and there was a file called 'x.xml'. So even if you forget the extension of your file XMLHttpRequest 2 WILL FIND IT</em>. I LOL'd</p>\n<hr />\n<p><em>Read a file synchronous</em></p>\n<p><strong>Don't do that.</strong></p>\n<p>If you want to block the browser for a while load a nice big <code>.txt</code> file synchronous.</p>\n<pre><code>function omg(a, c){ // URL\n  c = new XMLHttpRequest;\n  c.open('GET', a, true);\n  c.send();\n  return c; // Or c.response\n}\n</code></pre>\n<p>Now you can do</p>\n<pre><code> var res = omg('thisIsGonnaBlockThePage.txt');\n</code></pre>\n<p>There is no other way to do this in a non-asynchronous way. (Yeah, with setTimeout loop... but seriously?)</p>\n<p>Another point is... if you work with APIs or just your own list's files or whatever you always use different functions for each request...</p>\n<p>Only if you have a page where you load always the same XML/JSON or whatever you need only one function. In that case, modify a little the Ajax function and replace b with your special function.</p>\n<hr />\n<p>The functions above are for basic use.</p>\n<p>If you want to <em>extend</em> the function...</p>\n<p>Yes, you can.</p>\n<p>I'm using a lot of APIs and one of the first functions I integrate into every HTML page is the first Ajax function in this answer, with GET only...</p>\n<p>But you can do a lot of stuff with XMLHttpRequest 2:</p>\n<p>I made a download manager (using ranges on both sides with resume, filereader, and filesystem), various image resizers converters using canvas, populate web SQL databases with base64images and much more...</p>\n<p>But in these cases you should create a function only for that purpose... sometimes you need a blob, array buffers, you can set headers, override mimetype and there is a lot more...</p>\n<p>But the question here is how to return an Ajax response... (I added an easy way.)</p>\n",
            "content_license": "CC BY-SA 4.0",
            "creation_date": 1376899564,
            "is_accepted": false,
            "last_activity_date": 1617969438,
            "last_edit_date": 1617969438,
            "owner": {
                "accept_rate": 53,
                "display_name": "cocco",
                "link": "https://stackoverflow.com/users/2450730/cocco",
                "profile_image": "https://www.gravatar.com/avatar/1889fd8b5bf2de93682e3f78f6abf5e2?s=128&d=identicon&r=PG",
                "reputation": 15166,
                "user_id": 2450730,
                "user_type": "registered"
            },
            "question_id": 14220321,
            "score": 415
        },
        {
            "answer_id": 39858,
            "body": "<p>Another, more concise, option:</p>\n\n<pre><code>z = dict(x, **y)\n</code></pre>\n\n<p><strong>Note</strong>: this has become a popular answer, but it is important to point out that if <code>y</code> has any non-string keys, the fact that this works at all is an abuse of a CPython implementation detail, and it does not work in Python 3, or in PyPy, IronPython, or Jython. Also, <a href=\"http://mail.python.org/pipermail/python-dev/2010-April/099459.html\" rel=\"noreferrer\">Guido is not a fan</a>. So I can't recommend this technique for forward-compatible or cross-implementation portable code, which really means it should be avoided entirely.</p>\n",
            "content_license": "CC BY-SA 3.0",
            "creation_date": 1220370727,
            "is_accepted": false,
            "last_activity_date": 1453358604,
            "last_edit_date": 1453358604,
            "owner": {
                "accept_rate": 100,
                "display_name": "Carl Meyer",
                "link": "https://stackoverflow.com/users/3207/carl-meyer",
                "profile_image": "https://www.gravatar.com/avatar/b1f36e554be0e1ae19f9a74d6ece9107?s=128&d=identicon&r=PG",
                "reputation": 104566,
                "user_id": 3207,
                "user_type": "registered"
            },
            "question_id": 38987,
            "score": 377
        },
        {
            "answer_id": 30180679,
            "body": "<h2>If you're using promises, this answer is for you.</h2>\n<p>This means AngularJS, jQuery (with deferred), native <a href=\"https://en.wikipedia.org/wiki/XMLHttpRequest\" rel=\"nofollow noreferrer\">XHR</a>'s replacement (fetch), <a href=\"https://en.wikipedia.org/wiki/Ember.js\" rel=\"nofollow noreferrer\">Ember.js</a>, <a href=\"https://en.wikipedia.org/wiki/Backbone.js\" rel=\"nofollow noreferrer\">Backbone.js</a>'s save or any <a href=\"https://en.wikipedia.org/wiki/Node.js\" rel=\"nofollow noreferrer\">Node.js</a> library that returns promises.</p>\n<p>Your code should be something along the lines of this:</p>\n<pre><code>function foo() {\n    var data;\n    // Or $.get(...).then, or request(...).then, or query(...).then\n    fetch(&quot;/echo/json&quot;).then(function(response){\n        data = response.json();\n    });\n    return data;\n}\n\nvar result = foo(); // 'result' is always undefined no matter what.\n</code></pre>\n<p><a href=\"https://stackoverflow.com/questions/14220321/how-do-i-return-the-response-from-an-asynchronous-call/14220323#14220323\">Felix Kling did a fine job</a> writing an answer for people using jQuery with callbacks for Ajax. I have an answer for native XHR. This answer is for generic usage of promises either on the frontend or backend.</p>\n<hr />\n<h2>The core issue</h2>\n<p>The JavaScript concurrency model in the browser and on the server with Node.js/io.js is <em>asynchronous</em> and <em>reactive</em>.</p>\n<p>Whenever you call a method that returns a promise, the <code>then</code> handlers are <em>always</em> executed asynchronously - that is, <strong>after</strong> the code below them that is not in a <code>.then</code> handler.</p>\n<p>This means when you're returning <code>data</code> the <code>then</code> handler you've defined did not execute yet. This in turn means that the value you're returning has not been set to the correct value in time.</p>\n<p>Here is a simple analogy for the issue:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>    function getFive(){\n        var data;\n        setTimeout(function(){ // Set a timer for one second in the future\n           data = 5; // After a second, do this\n        }, 1000);\n        return data;\n    }\n    document.body.innerHTML = getFive(); // `undefined` here and not 5</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>The value of <code>data</code> is <code>undefined</code> since the <code>data = 5</code> part has not executed yet. It will likely execute in a second, but by that time it is irrelevant to the returned value.</p>\n<p>Since the operation did not happen yet (Ajax, server call, I/O, and timer) you're returning the value before the request got the chance to tell your code what that value is.</p>\n<p>One possible solution to this problem is to code <em>re-actively</em>, telling your program what to do when the calculation completed. Promises actively enable this by being temporal (time-sensitive) in nature.</p>\n<h3>Quick recap on promises</h3>\n<p>A Promise is a <em>value over time</em>. Promises have state. They start as pending with no value and can settle to:</p>\n<ul>\n<li><strong>fulfilled</strong> meaning that the computation completed successfully.</li>\n<li><strong>rejected</strong> meaning that the computation failed.</li>\n</ul>\n<p>A promise can only change states <em>once</em> after which it will always stay at the same state forever. You can attach <code>then</code> handlers to promises to extract their value and handle errors. <code>then</code> handlers allow <a href=\"https://stackoverflow.com/questions/22539815/arent-promises-just-callbacks\">chaining</a> of calls. Promises are created by <a href=\"https://stackoverflow.com/questions/22519784/how-do-i-convert-an-existing-callback-api-to-promises\">using APIs that return them</a>. For example, the more modern Ajax replacement <code>fetch</code> or jQuery's <code>$.get</code> return promises.</p>\n<p>When we call <code>.then</code> on a promise and <em>return</em> something from it - we get a promise for <em>the processed value</em>. If we return another promise we'll get amazing things, but let's hold our horses.</p>\n<h3>With promises</h3>\n<p>Let's see how we can solve the above issue with promises. First, let's demonstrate our understanding of promise states from above by using the <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Promise\" rel=\"nofollow noreferrer\">Promise constructor</a> for creating a delay function:</p>\n<pre><code>function delay(ms){ // Takes amount of milliseconds\n    // Returns a new promise\n    return new Promise(function(resolve, reject){\n        setTimeout(function(){ // When the time is up,\n            resolve(); // change the promise to the fulfilled state\n        }, ms);\n    });\n}\n</code></pre>\n<p>Now, after we <a href=\"http://stackoverflow.com/questions/22519784/how-do-i-convert-an-existing-callback-api-to-promises\">converted setTimeout</a> to use promises, we can use <code>then</code> to make it count:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function delay(ms){ // Takes amount of milliseconds\n  // Returns a new promise\n  return new Promise(function(resolve, reject){\n    setTimeout(function(){ // When the time is up,\n      resolve(); // change the promise to the fulfilled state\n    }, ms);\n  });\n}\n\nfunction getFive(){\n  // We're RETURNING the promise. Remember, a promise is a wrapper over our value\n  return delay(100).then(function(){ // When the promise is ready,\n      return 5; // return the value 5. Promises are all about return values\n  })\n}\n// We _have_ to wrap it like this in the call site, and we can't access the plain value\ngetFive().then(function(five){\n   document.body.innerHTML = five;\n});</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Basically, instead of returning a <em>value</em> which we can't do because of the concurrency model - we're returning a <em>wrapper</em> for a value that we can <em>unwrap</em> with <code>then</code>. It's like a box you can open with <code>then</code>.</p>\n<h3>Applying this</h3>\n<p>This stands the same for your original API call, you can:</p>\n<pre><code>function foo() {\n    // RETURN the promise\n    return fetch(&quot;/echo/json&quot;).then(function(response){\n        return response.json(); // Process it inside the `then`\n    });\n}\n\nfoo().then(function(response){\n    // Access the value inside the `then`\n})\n</code></pre>\n<p>So this works just as well. We've learned we can't return values from already asynchronous calls, but we can use promises and chain them to perform processing. We now know how to return the response from an asynchronous call.</p>\n<h2>ES2015 (ES6)</h2>\n<p>ES6 introduces <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\" rel=\"nofollow noreferrer\">generators</a> which are functions that can return in the middle and then resume the point they were at. This is typically useful for sequences, for example:</p>\n<pre><code>function* foo(){ // Notice the star. This is ES6, so new browsers, Nodes.js, and io.js only\n    yield 1;\n    yield 2;\n    while(true) yield 3;\n}\n</code></pre>\n<p>Is a function that returns an <em>iterator</em> over the sequence <code>1,2,3,3,3,3,....</code> which can be iterated. While this is interesting on its own and opens room for a lot of possibility, there is one particular interesting case.</p>\n<p>If the sequence we're producing is a sequence of actions rather than numbers - we can pause the function whenever an action is yielded and wait for it before we resume the function. So instead of a sequence of numbers, we need a sequence of <em>future</em> values - that is: promises.</p>\n<p>This somewhat a tricky, but very powerful trick let’s us write asynchronous code in a synchronous manner. There are several &quot;runners&quot; that do this for you. Writing one is a short few lines of code, but it is beyond the scope of this answer. I'll be using Bluebird's <code>Promise.coroutine</code> here, but there are other wrappers like <code>co</code> or <code>Q.async</code>.</p>\n<pre><code>var foo = coroutine(function*(){\n    var data = yield fetch(&quot;/echo/json&quot;); // Notice the yield\n    // The code here only executes _after_ the request is done\n    return data.json(); // 'data' is defined\n});\n</code></pre>\n<p>This method returns a promise itself, which we can consume from other coroutines. For example:</p>\n<pre><code>var main = coroutine(function*(){\n   var bar = yield foo(); // Wait our earlier coroutine. It returns a promise\n   // The server call is done here, and the code below executes when done\n   var baz = yield fetch(&quot;/api/users/&quot; + bar.userid); // Depends on foo's result\n   console.log(baz); // Runs after both requests are done\n});\nmain();\n</code></pre>\n<h2>ES2016 (ES7)</h2>\n<p>In ES7, this is further standardized. There are several proposals right now, but in all of them you can <code>await</code> promise. This is just &quot;sugar&quot; (nicer syntax) for the ES6 proposal above by adding the <code>async</code> and <code>await</code> keywords. Making the above example:</p>\n<pre><code>async function foo(){\n    var data = await fetch(&quot;/echo/json&quot;); // Notice the await\n    // code here only executes _after_ the request is done\n    return data.json(); // 'data' is defined\n}\n</code></pre>\n<p>It still returns a promise just the same :)</p>\n",
            "content_license": "CC BY-SA 4.0",
            "creation_date": 1431397377,
            "is_accepted": false,
            "last_activity_date": 1617973823,
            "last_edit_date": 1617973823,
            "owner": {
                "accept_rate": 88,
                "display_name": "Benjamin Gruenbaum",
                "link": "https://stackoverflow.com/users/1348195/benjamin-gruenbaum",
                "profile_image": "https://www.gravatar.com/avatar/f6dca2295546af21e1cde8e68f2d49bd?s=128&d=identicon&r=PG",
                "reputation": 245484,
                "user_id": 1348195,
                "user_type": "registered"
            },
            "question_id": 14220321,
            "score": 334
        },
        {
            "answer_id": 2710949,
            "body": "<p>Both Google and <a href=\"http://www.python.org/dev/peps/pep-0008/#programming-recommendations\" rel=\"noreferrer\">Python</a>'s style guide is the best practice:</p>\n\n<pre><code>if x is not None:\n    # Do something about x\n</code></pre>\n\n<p>Using <code>not x</code> can cause unwanted results. </p>\n\n<p>See below:</p>\n\n<pre><code>&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; not x\nFalse\n&gt;&gt;&gt; x = [1]\n&gt;&gt;&gt; not x\nFalse\n&gt;&gt;&gt; x = 0\n&gt;&gt;&gt; not x\nTrue\n&gt;&gt;&gt; x = [0]         # You don't want to fall in this one.\n&gt;&gt;&gt; not x\nFalse\n</code></pre>\n\n<p>You may be interested to see what literals are evaluated to <code>True</code> or <code>False</code> in Python:</p>\n\n<ul>\n<li><a href=\"http://docs.python.org/library/stdtypes.html\" rel=\"noreferrer\">Truth Value Testing</a></li>\n</ul>\n\n<hr>\n\n<p><strong>Edit for comment below:</strong> </p>\n\n<p>I just did some more testing. <code>not x is None</code> doesn't negate <code>x</code> first and then compared to <code>None</code>. In fact, it seems the <code>is</code> operator has a higher precedence when used that way:</p>\n\n<pre><code>&gt;&gt;&gt; x\n[0]\n&gt;&gt;&gt; not x is None\nTrue\n&gt;&gt;&gt; not (x is None)\nTrue\n&gt;&gt;&gt; (not x) is None\nFalse\n</code></pre>\n\n<p>Therefore, <code>not x is None</code> is just, in my honest opinion, best avoided.</p>\n\n<hr>\n\n<p><strong>More edit:</strong></p>\n\n<p>I just did <em>more</em> testing and can confirm that bukzor's comment is correct. (At least, I wasn't able to prove it otherwise.)</p>\n\n<p>This means <code>if x is not None</code> has the exact result as <code>if not x is None</code>. I stand corrected. Thanks bukzor.</p>\n\n<p>However, my answer still stands: <strong>Use the conventional <code>if x is not None</code></strong>. <code>:]</code></p>\n",
            "content_license": "CC BY-SA 4.0",
            "creation_date": 1272251612,
            "is_accepted": false,
            "last_activity_date": 1587319158,
            "last_edit_date": 1587319158,
            "owner": {
                "accept_rate": 89,
                "display_name": "Xavier Ho",
                "link": "https://stackoverflow.com/users/319952/xavier-ho",
                "profile_image": "https://www.gravatar.com/avatar/5afd92c3c582d88bb88de34717ab931e?s=128&d=identicon&r=PG",
                "reputation": 13735,
                "user_id": 319952,
                "user_type": "registered"
            },
            "question_id": 2710940,
            "score": 285
        },
        {
            "answer_id": 23819901,
            "body": "<p>You are using Ajax incorrectly. The idea is not to have it return anything, but instead hand off the data to something called a callback function, which handles the data.</p>\n\n<p>That is:</p>\n\n<pre><code>function handleData( responseData ) {\n\n    // Do what you want with the data\n    console.log(responseData);\n}\n\n$.ajax({\n    url: \"hi.php\",\n    ...\n    success: function ( data, status, XHR ) {\n        handleData(data);\n    }\n});\n</code></pre>\n\n<p>Returning anything in the submit handler will not do anything. You must instead either hand off the data, or do what you want with it directly inside the success function.</p>\n",
            "content_license": "CC BY-SA 3.0",
            "creation_date": 1400810701,
            "is_accepted": false,
            "last_activity_date": 1448114823,
            "last_edit_date": 1448114823,
            "owner": {
                "accept_rate": 71,
                "display_name": "Nic",
                "link": "https://stackoverflow.com/users/2802187/nic",
                "profile_image": "https://www.gravatar.com/avatar/c85a76cd9f3922d2eee4499552c87212?s=128&d=identicon&r=PG&f=1",
                "reputation": 2573,
                "user_id": 2802187,
                "user_type": "registered"
            },
            "question_id": 14220321,
            "score": 264
        },
        {
            "answer_id": 21862907,
            "body": "<p>The simplest solution is to create a JavaScript function and call it for the Ajax <code>success</code> callback.</p>\n<pre><code>function callServerAsync(){\n    $.ajax({\n        url: '...',\n        success: function(response) {\n\n            successCallback(response);\n        }\n    });\n}\n\nfunction successCallback(responseObj){\n    // Do something like read the response and show data\n    alert(JSON.stringify(responseObj)); // Only applicable to a JSON response\n}\n\nfunction foo(callback) {\n\n    $.ajax({\n        url: '...',\n        success: function(response) {\n           return callback(null, response);\n        }\n    });\n}\n\nvar result = foo(function(err, result){\n          if (!err)\n           console.log(result);\n});\n</code></pre>\n",
            "content_license": "CC BY-SA 4.0",
            "creation_date": 1392749917,
            "is_accepted": false,
            "last_activity_date": 1617969881,
            "last_edit_date": 1617969881,
            "owner": {
                "accept_rate": 17,
                "display_name": "Hemant Bavle",
                "link": "https://stackoverflow.com/users/1560518/hemant-bavle",
                "profile_image": "https://www.gravatar.com/avatar/6923bf7b90847f2df406fb5f7a29e500?s=128&d=identicon&r=PG",
                "reputation": 3089,
                "user_id": 1560518,
                "user_type": "registered"
            },
            "question_id": 14220321,
            "score": 247
        },
        {
            "answer_id": 38898933,
            "body": "<p>I will answer with a horrible-looking, hand-drawn comic. The second image is the reason why <code>result</code> is <code>undefined</code> in your code example.</p>\n\n<p><a href=\"https://i.imgur.com/v5ksbBC.jpg\"><img src=\"https://i.imgur.com/v5ksbBC.jpg\" alt=\"enter image description here\"></a></p>\n",
            "content_license": "CC BY-SA 3.0",
            "creation_date": 1470925056,
            "is_accepted": false,
            "last_activity_date": 1470935544,
            "last_edit_date": 1470935544,
            "owner": {
                "accept_rate": 71,
                "display_name": "Johannes Fahrenkrug",
                "link": "https://stackoverflow.com/users/171933/johannes-fahrenkrug",
                "profile_image": "https://www.gravatar.com/avatar/b0c68cd8ea105ef0e8fbe8f7e0fdbf5e?s=128&d=identicon&r=PG",
                "reputation": 38300,
                "user_id": 171933,
                "user_type": "registered"
            },
            "question_id": 14220321,
            "score": 246
        },
        {
            "answer_id": 49492,
            "body": "<p>This probably won't be a popular answer, but you almost certainly do not want to do this.  If you want a copy that's a merge, then use copy (or <a href=\"https://docs.python.org/2/library/copy.html\" rel=\"noreferrer\">deepcopy</a>, depending on what you want) and then update.  The two lines of code are much more readable - more Pythonic - than the single line creation with .items() + .items().  Explicit is better than implicit.</p>\n\n<p>In addition, when you use .items() (pre Python 3.0), you're creating a new list that contains the items from the dict.  If your dictionaries are large, then that is quite a lot of overhead (two large lists that will be thrown away as soon as the merged dict is created).  update() can work more efficiently, because it can run through the second dict item-by-item.</p>\n\n<p>In terms of <a href=\"https://docs.python.org/2/library/timeit.html\" rel=\"noreferrer\">time</a>:</p>\n\n<pre><code>&gt;&gt;&gt; timeit.Timer(\"dict(x, **y)\", \"x = dict(zip(range(1000), range(1000)))\\ny=dict(zip(range(1000,2000), range(1000,2000)))\").timeit(100000)\n15.52571702003479\n&gt;&gt;&gt; timeit.Timer(\"temp = x.copy()\\ntemp.update(y)\", \"x = dict(zip(range(1000), range(1000)))\\ny=dict(zip(range(1000,2000), range(1000,2000)))\").timeit(100000)\n15.694622993469238\n&gt;&gt;&gt; timeit.Timer(\"dict(x.items() + y.items())\", \"x = dict(zip(range(1000), range(1000)))\\ny=dict(zip(range(1000,2000), range(1000,2000)))\").timeit(100000)\n41.484580039978027\n</code></pre>\n\n<p>IMO the tiny slowdown between the first two is worth it for the readability.  In addition, keyword arguments for dictionary creation was only added in Python 2.3, whereas copy() and update() will work in older versions.</p>\n",
            "content_license": "CC BY-SA 3.0",
            "creation_date": 1220872614,
            "is_accepted": false,
            "last_activity_date": 1407282962,
            "last_edit_date": 1407282962,
            "owner": {
                "accept_rate": 62,
                "display_name": "Tony Meyer",
                "link": "https://stackoverflow.com/users/4966/tony-meyer",
                "profile_image": "https://www.gravatar.com/avatar/929fba6f82f04811b09c16df239bbb21?s=128&d=identicon&r=PG",
                "reputation": 9311,
                "user_id": 4966,
                "user_type": "registered"
            },
            "question_id": 38987,
            "score": 236
        },
        {
            "answer_id": 228366,
            "body": "<p>In a follow-up answer, you asked about the relative performance of these two alternatives:</p>\n\n<pre><code>z1 = dict(x.items() + y.items())\nz2 = dict(x, **y)\n</code></pre>\n\n<p>On my machine, at least (a fairly ordinary x86_64 running Python 2.5.2), alternative <code>z2</code> is not only shorter and simpler but also significantly faster.  You can verify this for yourself using the <code>timeit</code> module that comes with Python.</p>\n\n<p>Example 1: identical dictionaries mapping 20 consecutive integers to themselves:</p>\n\n<pre><code>% python -m timeit -s 'x=y=dict((i,i) for i in range(20))' 'z1=dict(x.items() + y.items())'\n100000 loops, best of 3: 5.67 usec per loop\n% python -m timeit -s 'x=y=dict((i,i) for i in range(20))' 'z2=dict(x, **y)' \n100000 loops, best of 3: 1.53 usec per loop\n</code></pre>\n\n<p><code>z2</code> wins by a factor of 3.5 or so.  Different dictionaries seem to yield quite different results, but <code>z2</code> always seems to come out ahead.  (If you get inconsistent results for the <em>same</em> test, try passing in <code>-r</code> with a number larger than the default 3.)</p>\n\n<p>Example 2: non-overlapping dictionaries mapping 252 short strings to integers and vice versa:</p>\n\n<pre><code>% python -m timeit -s 'from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z1=dict(x.items() + y.items())'\n1000 loops, best of 3: 260 usec per loop\n% python -m timeit -s 'from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z2=dict(x, **y)'               \n10000 loops, best of 3: 26.9 usec per loop\n</code></pre>\n\n<p><code>z2</code> wins by about a factor of 10.  That's a pretty big win in my book!</p>\n\n<p>After comparing those two, I wondered if <code>z1</code>'s poor performance could be attributed to the overhead of constructing the two item lists, which in turn led me to wonder if this variation might work better:</p>\n\n<pre><code>from itertools import chain\nz3 = dict(chain(x.iteritems(), y.iteritems()))\n</code></pre>\n\n<p>A few quick tests, e.g.</p>\n\n<pre><code>% python -m timeit -s 'from itertools import chain; from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z3=dict(chain(x.iteritems(), y.iteritems()))'\n10000 loops, best of 3: 66 usec per loop\n</code></pre>\n\n<p>lead me to conclude that <code>z3</code> is somewhat faster than <code>z1</code>, but not nearly as fast as <code>z2</code>.  Definitely not worth all the extra typing.</p>\n\n<p>This discussion is still missing something important, which is a performance comparison of these alternatives with the \"obvious\" way of merging two lists: using the <code>update</code> method.  To try to keep things on an equal footing with the expressions, none of which modify x or y, I'm going to make a copy of x instead of modifying it in-place, as follows:</p>\n\n<pre><code>z0 = dict(x)\nz0.update(y)\n</code></pre>\n\n<p>A typical result:</p>\n\n<pre><code>% python -m timeit -s 'from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z0=dict(x); z0.update(y)'\n10000 loops, best of 3: 26.9 usec per loop\n</code></pre>\n\n<p>In other words, <code>z0</code> and <code>z2</code> seem to have essentially identical performance.  Do you think this might be a coincidence?  I don't....</p>\n\n<p>In fact, I'd go so far as to claim that it's impossible for pure Python code to do any better than this.  And if you can do significantly better in a C extension module, I imagine the Python folks might well be interested in incorporating your code (or a variation on your approach) into the Python core.  Python uses <code>dict</code> in lots of places; optimizing its operations is a big deal.</p>\n\n<p>You could also write this as</p>\n\n<pre><code>z0 = x.copy()\nz0.update(y)\n</code></pre>\n\n<p>as Tony does, but (not surprisingly) the difference in notation turns out not to have any measurable effect on performance.  Use whichever looks right to you.  Of course, he's absolutely correct to point out that the two-statement version is much easier to understand.</p>\n",
            "content_license": "CC BY-SA 3.0",
            "creation_date": 1224729536,
            "is_accepted": false,
            "last_activity_date": 1420857175,
            "last_edit_date": 1420857175,
            "owner": {
                "accept_rate": 100,
                "display_name": "zaphod",
                "link": "https://stackoverflow.com/users/13871/zaphod",
                "profile_image": "https://i.stack.imgur.com/X46zs.jpg?s=128&g=1",
                "reputation": 4128,
                "user_id": 13871,
                "user_type": "registered"
            },
            "question_id": 38987,
            "score": 172
        }
    ],
    "quota_max": 300,
    "quota_remaining": 275
}